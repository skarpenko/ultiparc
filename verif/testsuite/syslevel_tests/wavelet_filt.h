/*
 * Copyright (c) 2015-2018 The Ultiparc Project. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Wavelet filter coefficients in floating-point and fixed-point (Q8.24 format)
 */

#ifndef _SYSLEVEL_TESTS_WAVELET_FILT_H_
#define _SYSLEVEL_TESTS_WAVELET_FILT_H_


#if FXP_FRAC_BITS != 24
# error Incorrect FXP_FRAC_BITS specified!
#endif


/* Wavelet filter length */
#define WLTLEN(a) \
	(sizeof(a) / sizeof(a[0]))


/* Daubechies 2 */
static const float flp_db2_h[4] = {
	+0.48296291314469025, +0.83651630373746899,
	+0.22414386804185735, -0.12940952255092145
};
static const float flp_db2_g[4] = {
	-0.12940952255092145, -0.22414386804185735,
	+0.83651630373746899, -0.48296291314469025
};
static const fixed_t fxp_db2_h[4] = {
	+8102773, +14034415, +3760510, -2171131
};
static const fixed_t fxp_db2_g[4] = {
	-2171131, -3760510, +14034415, -8102773
};


/* Coiflet 1 */
static const float flp_coif1_h[6] = {
	-0.07273261951285390, +0.33789766245780922, +0.85257202021225542,
	+0.38486484686420286, -0.07273261951285390, -0.01565572813546454
};
static const float flp_coif1_g[6] = {
	-0.01565572813546454, +0.07273261951285390, +0.38486484686420286,
	-0.85257202021225542, +0.33789766245780922, +0.07273261951285390
};
static const fixed_t fxp_coif1_h[6] = {
	-1220250, +5668982, +14303785, +6456960, -1220250, -262659
};
static const fixed_t fxp_coif1_g[6] = {
	-262659, +1220250, +6456960, -14303785, +5668982, +1220250
};


/* Coiflet 5 */
static const float flp_coif5_h[30] = {
	-0.00021208083980380, +0.00035858968789574, +0.00217823635810902,
	-0.00415935878138605, -0.01013111751984979, +0.02340815678583920,
	+0.02816802897093635, -0.09192001055969624, -0.05204316317624377,
	+0.42156620669085149, +0.77428960365295618, +0.43799162617183712,
	-0.06203596396290357, -0.10557420870333893, +0.04128920875018170,
	+0.03268357426711183, -0.01976177894257264, -0.00916423116248185,
	+0.00676418544805308, +0.00243337321265767, -0.00166286370201308,
	-0.00063813134304511, +0.00030225958181306, +0.00014054114970203,
	-0.00004134043227251, -0.00002131502680996, +0.00000373465517514,
	+0.00000206376185136, -0.00000016744288577, -0.00000009517657274
};
static const float flp_coif5_g[30] = {
	-0.00000009517657274, +0.00000016744288577, +0.00000206376185136,
	-0.00000373465517514, -0.00002131502680996, +0.00004134043227251,
	+0.00014054114970203, -0.00030225958181306, -0.00063813134304511,
	+0.00166286370201308, +0.00243337321265767, -0.00676418544805308,
	-0.00916423116248185, +0.01976177894257264, +0.03268357426711183,
	-0.04128920875018170, -0.10557420870333893, +0.06203596396290357,
	+0.43799162617183712, -0.77428960365295618, +0.42156620669085149,
	+0.05204316317624377, -0.09192001055969624, -0.02816802897093635,
	+0.02340815678583920, +0.01013111751984979, -0.00415935878138605,
	-0.00217823635810902, +0.00035858968789574, +0.00021208083980380
};
static const fixed_t fxp_coif5_h[30] = {
	-3558, +6016, +36544, -69782, -169971, +392723, +472581, -1542161,
	-873139, +7072707, +12990424, +7348280, -1040790, -1771241, +692718,
	+548339, -331547, -153750, +113484, +40825, -27898, -10706, +5071,
	+2357, -693, -357, +62, +34, -2, -1
};
static const fixed_t fxp_coif5_g[30] = {
	-1, +2, +34, -62, -357, +693, +2357, -5071, -10706, +27898, +40825,
	-113484, -153750, +331547, +548339, -692718, -1771241, +1040790,
	+7348280, -12990424, +7072707, +873139, -1542161, -472581, +392723,
	+169971, -69782, -36544, +6016, +3558
};


/* Biorthogonal 2.2 */
static const float flp_bior22_h[6] = {
	+0.00000000000000000, +0.35355339059327379, +0.70710678118654757,
	+0.35355339059327379, +0.00000000000000000, +0.00000000000000000
};
static const float flp_bior22_g[6] = {
	+0.00000000000000000, +0.17677669529663689, +0.35355339059327379,
	-1.06066017177982141, +0.35355339059327379, +0.17677669529663689
};
static const fixed_t fxp_bior22_h[6] = {
	+0, +5931641, +11863283, +5931641, +0, +0
};
static const fixed_t fxp_bior22_g[6] = {
	+0, +2965820, +5931641, -17794924, +5931641, +2965820
};


/* Reverse biorthogonal 2.2 */
static const float flp_rbio22_h[6] = {
	-0.17677669529663689, +0.35355339059327379, +1.06066017177982141,
	+0.35355339059327379, -0.17677669529663689, +0.00000000000000000
};
static const float flp_rbio22_g[6] = {
	+0.00000000000000000, +0.00000000000000000, +0.35355339059327379,
	-0.70710678118654757, +0.35355339059327379, +0.00000000000000000
};
static const fixed_t fxp_rbio22_h[6] = {
	-2965820, +5931641, +17794924, +5931641, -2965820, +0
};
static const fixed_t fxp_rbio22_g[6] = {
	+0, +0, +5931641, -11863283, +5931641, +0
};


#endif /* _SYSLEVEL_TESTS_WAVELET_FILT_H_ */
